// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	queue "monzo-crawler/pkg/queue"

	mock "github.com/stretchr/testify/mock"
)

// IQueue is an autogenerated mock type for the IQueue type
type IQueue struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IQueue) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeQueue provides a mock function with given fields:
func (_m *IQueue) DeQueue() (queue.Element, error) {
	ret := _m.Called()

	var r0 queue.Element
	if rf, ok := ret.Get(0).(func() queue.Element); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.Element)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnQueue provides a mock function with given fields: _a0
func (_m *IQueue) EnQueue(_a0 queue.Element) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(queue.Element) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *IQueue) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewIQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewIQueue creates a new instance of IQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIQueue(t mockConstructorTestingTNewIQueue) *IQueue {
	mock := &IQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
