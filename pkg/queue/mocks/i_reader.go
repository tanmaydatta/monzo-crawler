// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	queue "monzo-crawler/pkg/queue"

	mock "github.com/stretchr/testify/mock"
)

// IReader is an autogenerated mock type for the IReader type
type IReader struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IReader) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields:
func (_m *IReader) Read() (queue.Element, error) {
	ret := _m.Called()

	var r0 queue.Element
	if rf, ok := ret.Get(0).(func() queue.Element); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.Element)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewIReader creates a new instance of IReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIReader(t mockConstructorTestingTNewIReader) *IReader {
	mock := &IReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
